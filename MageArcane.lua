-- Autogenerated file.  Do not edit.  All changes will be lost
--
-- Definition of Arcane Mage

DestroDummies.classMageArcane = DestroDummies.lastClassVal + 1;
DestroDummies.lastClassVal = DestroDummies.lastClassVal + 1;

local mIndexBase = DestroDummies.lastMutexIndex;

local varrotSpot = 0;
DestroDummies.mutex[mIndexBase + 1] = {};
DestroDummies.mutex[mIndexBase + 1].clipOOCombat = 300;
DestroDummies.mutex[mIndexBase + 1].clipCombat = 5;
DestroDummies.mutex[mIndexBase + 1][1] = DestroDummies:xlateString("Molten Armor")
DestroDummies.mutex[mIndexBase + 1][2] = DestroDummies:xlateString("Mage Armor")
DestroDummies.mutex[mIndexBase + 1][3] = DestroDummies:xlateString("Frost Armor")
DestroDummies.mutex[mIndexBase + 1].count = 3;
DestroDummies.mutex[mIndexBase + 2] = {};
DestroDummies.mutex[mIndexBase + 2].clipOOCombat = 300;
DestroDummies.mutex[mIndexBase + 2].clipCombat = 5;
DestroDummies.mutex[mIndexBase + 2][1] = DestroDummies:xlateString("Arcane Brilliance")
DestroDummies.mutex[mIndexBase + 2][2] = DestroDummies:xlateString("Dalaran Brilliance")
DestroDummies.mutex[mIndexBase + 2].count = 2;
local varlastSpell = nil;
local function spellSent(varspell)
    varlastSpell = varspell
end
DestroDummies.registry.spellSent[DestroDummies.classMageArcane] = spellSent;

local function postSpell(varspell, varsuccess)
    varlastSpell = nil
end
DestroDummies.registry.postSpell[DestroDummies.classMageArcane] = postSpell;

local function PickCombat()
    DestroDummies:analysisInit();
    local clipArcaneBrilliance = 5;
    if (not (DestroDummies:utilMxBuffByMe(mIndexBase + 1))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Mage Armor"));
    end;
    if (not (DestroDummies:utilMxBuff(mIndexBase + 2))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Brilliance"));
    end;
    local varArcmTime;
    local varArcmCount;
    varArcmTime, varArcmCount = DestroDummies:utilBuffInfo(DestroDummies:xlateString("Arcane Missiles2"), false, "player")
    local varArcCTime;
    local varArcCCount;
    varArcCTime, varArcCCount = DestroDummies:utilBuffInfo(DestroDummies:xlateString("Arcane Charge"), true, "player")
    local varhaveTotem;
    local vartotemName;
    local varremainingTime;
    varhaveTotem, vartotemName, varremainingTime = DestroDummies:utilTotemType(1)
    local varPowermana;
    if (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Power"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Arcane Power"), 1);
    end;
    if (GetSpellInfo(DestroDummies:xlateString("Incanter's Ward")) ~= nil) then
        if DestroDummies:utilBuff(DestroDummies:xlateString("Arcane Power"), 0, "player", "HELPFUL", nil) then
            varPowermana = 1
            if ((not (DestroDummies:utilBuff(DestroDummies:xlateString("Alter Time"), 0, "player", "HELPFUL", nil))) and (DestroDummies:spellReady(DestroDummies:xlateString("Alter Time")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Alter Time"));
            end;
        else
            if (DestroDummies:spellReady(DestroDummies:xlateString("Incanter's Ward"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Incanter's Ward"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Nether Tempest"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Nether Tempest")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Nether Tempest"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Living Bomb"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Living Bomb")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Living Bomb"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Frost Bomb"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Frost Bomb")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Frost Bomb"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Mirror Image"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mirror Image"));
            end;
            if ((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) >= (2))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if (((((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) <= (90)) and (DestroDummies:spellReady(DestroDummies:xlateString("Scorch")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Scorch"));
            end;
            if (((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) == (1))) and ((varArcmTime) < (3))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if ((((varArcCCount) >= (4)) and (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Barrage")))) and ((varArcmTime) < (3))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Barrage"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Presence of Mind"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Presence of Mind"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Blast"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Blast"));
            end;
        end;
        if ((((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) >= (30)) and ((varPowermana) == (1)) then
            if ((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) >= (2))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Blast"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Blast"));
            end;
        end;
        if (((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) < (30) then
            varPowermana = 0
            if (DestroDummies:spellReady(DestroDummies:xlateString("Evocation"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Evocation"));
            end;
        end;
    else
        if DestroDummies:utilBuff(DestroDummies:xlateString("Arcane Power"), 0, "player", "HELPFUL", nil) then
            varPowermana = 1
            if ((not (DestroDummies:utilBuff(DestroDummies:xlateString("Alter Time"), 0, "player", "HELPFUL", nil))) and (DestroDummies:spellReady(DestroDummies:xlateString("Alter Time")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Alter Time"));
            end;
            if ((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) >= (2))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Blast"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Blast"));
            end;
        else
            if (((((varhaveTotem) == (0)) or ((varremainingTime) < (5)))) and (DestroDummies:spellReady(DestroDummies:xlateString("Evocation")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Evocation"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Nether Tempest"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Nether Tempest")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Nether Tempest"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Living Bomb"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Living Bomb")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Living Bomb"));
            end;
            if ((not (DestroDummies:utilDebuff(DestroDummies:xlateString("Frost Bomb"), 0))) and (DestroDummies:spellReady(DestroDummies:xlateString("Frost Bomb")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Frost Bomb"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Mirror Image"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mirror Image"));
            end;
            if ((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) >= (2))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if (((((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) <= (90)) and (DestroDummies:spellReady(DestroDummies:xlateString("Scorch")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Scorch"));
            end;
            if (((DestroDummies:spellReady(DestroDummies:xlateString("Arcane Missiles"))) and ((varArcmCount) == (1))) and ((varArcmTime) < (3))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Missiles"));
            end;
            if ((((varArcCCount) >= (4)) and (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Barrage")))) and ((varArcmTime) < (3))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Barrage"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Presence of Mind"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Presence of Mind"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Arcane Blast"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Blast"));
            end;
        end;
    end;
    return DestroDummies:analysisPick("Shoot", nil);
end;

local function PickNoCombat()
    DestroDummies:analysisInit();
    if (not (DestroDummies:utilMxBuffByMe(mIndexBase + 1))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Mage Armor"));
    end;
    if (not (DestroDummies:utilMxBuff(mIndexBase + 2))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Brilliance"));
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

-- populate our registries
DestroDummies.registry.decideCombat[DestroDummies.classMageArcane] = PickCombat;
DestroDummies.registry.decideNoCombat[DestroDummies.classMageArcane] = PickNoCombat;
DestroDummies.lastMutexIndex = mIndexBase + 2;
