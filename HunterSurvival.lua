-- Autogenerated file.  Do not edit.  All changes will be lost
--
-- Definition of Survival Hunter

DestroDummies.classHunterSurvival = DestroDummies.lastClassVal + 1;
DestroDummies.lastClassVal = DestroDummies.lastClassVal + 1;

local mIndexBase = DestroDummies.lastMutexIndex;

DestroDummies.mutex[mIndexBase + 1] = {};
DestroDummies.mutex[mIndexBase + 1].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 1].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 1][1] = DestroDummies:xlateString("Aspect of the Hawk")
DestroDummies.mutex[mIndexBase + 1][2] = DestroDummies:xlateString("Aspect of the Iron Hawk")
DestroDummies.mutex[mIndexBase + 1][3] = DestroDummies:xlateString("Aspect of the Pack")
DestroDummies.mutex[mIndexBase + 1][4] = DestroDummies:xlateString("Aspect of the Wild")
DestroDummies.mutex[mIndexBase + 1][5] = DestroDummies:xlateString("Aspect of the Cheetah")
DestroDummies.mutex[mIndexBase + 1][6] = DestroDummies:xlateString("Aspect of the Fox")
DestroDummies.mutex[mIndexBase + 1].count = 6;
DestroDummies.mutex[mIndexBase + 2] = {};
DestroDummies.mutex[mIndexBase + 2].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 2].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 2][1] = DestroDummies:xlateString("Serpent Sting")
DestroDummies.mutex[mIndexBase + 2][2] = DestroDummies:xlateString("Wyvern Sting")
DestroDummies.mutex[mIndexBase + 2].count = 2;
DestroDummies.mutex[mIndexBase + 3] = {};
DestroDummies.mutex[mIndexBase + 3].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 3].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 3][1] = DestroDummies:xlateString("Marked for Death")
DestroDummies.mutex[mIndexBase + 3][2] = DestroDummies:xlateString("Hunter's Mark")
DestroDummies.mutex[mIndexBase + 3].count = 2;
function DestroDummies:genfunc_DoAspect(varcombat, varranged)
    if varcombat then
        local switchvar0 = DestroDummies:utilMxBuffByMe(mIndexBase + 1);
        if ((switchvar0 == (DestroDummies:xlateString("Aspect of the Hawk"))) or (switchvar0 == (DestroDummies:xlateString("Aspect of the Iron Hawk")))or (switchvar0 == (DestroDummies:xlateString("Aspect of the Fox")))or (switchvar0 == (DestroDummies:xlateString("Aspect of the Wild")))) then
        else
            DestroDummies:analysisAdd(DestroDummies:xlateString("Aspect of the Iron Hawk"));
            DestroDummies:analysisAdd(DestroDummies:xlateString("Aspect of the Hawk"));
        end
    else
        if (not (DestroDummies:utilMxBuffByMe(mIndexBase + 1))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Aspect of the Iron Hawk"));
        end;
        if (not (DestroDummies:utilMxBuffByMe(mIndexBase + 1))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Aspect of the Hawk"));
        end;
    end;
end

local function PickCombat()
    DestroDummies:analysisInit();
    local varpHealth;
    local varranged;
    varpHealth = DestroDummies:utilHealth("pet")
    if (varpHealth) == (nil) then
        varpHealth = 0
    end;
    if ((varpHealth) == (0)) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Revive Pet"), 0);
    end;
    if ((DestroDummies:spellReady(DestroDummies:xlateString("Kill Command"))) and (not (DestroDummies:utilBuff(DestroDummies:xlateString("Kill Command"), 0, "pet", "HELPFUL", nil)))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Kill Command"), 0);
    end;
    if (DestroDummies:spellReady(DestroDummies:xlateString("Rapid Fire"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Rapid Fire"), 0);
    end;
    if (DestroDummies:spellReady(DestroDummies:xlateString("Readiness"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Readiness"), 0);
    end;
    varranged = ((CheckInteractDistance("target", 3) == nil) or (IsSpellInRange(DestroDummies:xlateString("Auto Shot")) == 1))
    if (((not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil))) and ((varpHealth) > (0))) and ((varpHealth) < (50))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
    end;
    DestroDummies:genfunc_DoAspect(1, varranged);
    if ((not (DestroDummies:utilMxDebuff(mIndexBase + 3))) and (varranged)) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Hunter's Mark"));
    end;
    if DestroDummiesPCdb.ferralMode then
        if (((varranged) and (not (DestroDummies:utilMxDebuffByMe(mIndexBase + 2)))) and (not ((DestroDummies.lastSpell == DestroDummies:xlateString("Serpent Sting"))))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Serpent Sting"));
        end;
    else
        if varranged then
            if ((not (DestroDummies:utilMxDebuffByMe(mIndexBase + 2))) and (not ((DestroDummies.lastSpell == DestroDummies:xlateString("Serpent Sting"))))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Serpent Sting"));
            end;
            if (not (DestroDummies:utilDebuffByMe(DestroDummies:xlateString("Explosive Shot"), 0))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Explosive Shot"));
            end;
            if ((DestroDummies:utilHealth("target")) <= (20)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Kill Shot"));
            end;
            if ((DestroDummies:utilTimeToDie()) > (15)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Black Arrow"));
            end;
            if (((not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil))) and ((varpHealth) > (0))) and ((varpHealth) < (70))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
            end;
            local varblackArrowPower;
            if (DestroDummies:cooldownTime(DestroDummies:xlateString("Black Arrow"))) < (6) then
                varblackArrowPower = DestroDummies:utilRequiredPower(DestroDummies:xlateString("Black Arrow"))
            else
                varblackArrowPower = 0
            end;
            if ((DestroDummies:unitPowerAfterCast()) >= ((((DestroDummies:utilRequiredPower(DestroDummies:xlateString("Explosive Shot"))) + (varblackArrowPower)) + (DestroDummies:utilRequiredPower(DestroDummies:xlateString("Arcane Shot")))))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Shot"));
            end;
            DestroDummies:analysisAdd(DestroDummies:xlateString("Cobra Shot"));
            DestroDummies:analysisAdd(DestroDummies:xlateString("Steady Shot"));
        else
            DestroDummies:analysisAdd(DestroDummies:xlateString("Disengage"));
            if (DestroDummies:spellReady(DestroDummies:xlateString("Raptor Strike"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Raptor Strike"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Wing Clip"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Wing Clip"));
            end;
        end;
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

local function PickNoCombat()
    DestroDummies:analysisInit();
    if not (IsMounted()) then
        DestroDummies:genfunc_DoAspect(nil, nil);
        local varpHealth = DestroDummies:utilHealth("pet");
        local varwithPet = HasPetUI();
        if (varpHealth) == (nil) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Revive Pet"));
        else
            if (not (UnitExists("pet"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Call Pet"));
            end;
            if ((varwithPet) and (((((varpHealth) > (0)) and ((varpHealth) < (90))) and (not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil)))))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
            end;
        end;
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

-- populate our registries
DestroDummies.registry.decideCombat[DestroDummies.classHunterSurvival] = PickCombat;
DestroDummies.registry.decideNoCombat[DestroDummies.classHunterSurvival] = PickNoCombat;
DestroDummies.lastMutexIndex = mIndexBase + 3;
