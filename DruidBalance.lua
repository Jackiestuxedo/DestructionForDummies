-- Autogenerated file.  Do not edit.  All changes will be lost
--
-- Definition of Balance Druid

DestroDummies.classDruidBalance = DestroDummies.lastClassVal + 1;
DestroDummies.lastClassVal = DestroDummies.lastClassVal + 1;

local mIndexBase = DestroDummies.lastMutexIndex;

local varnextEclipseLunar = true;
local varcertainEclipseDir = nil;
local varforceEclipse = nil;
local varhasMoonkin;
local varlastLunarPower;
DestroDummies.mutex[mIndexBase + 1] = {};
DestroDummies.mutex[mIndexBase + 1].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 1].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 1][1] = DestroDummies:xlateString("Expose Armor")
DestroDummies.mutex[mIndexBase + 1][2] = DestroDummies:xlateString("Faerie Fire")
DestroDummies.mutex[mIndexBase + 1][3] = DestroDummies:xlateString("Faerie Fire (Feral)")
DestroDummies.mutex[mIndexBase + 1].count = 3;
DestroDummies.mutex[mIndexBase + 2] = {};
DestroDummies.mutex[mIndexBase + 2].clipCombat = 5;
DestroDummies.mutex[mIndexBase + 2].clipOOCombat = 5;
DestroDummies.mutex[mIndexBase + 2][1] = DestroDummies:xlateString("Mark of the Wild")
DestroDummies.mutex[mIndexBase + 2][2] = DestroDummies:xlateString("Blessing of Kings")
DestroDummies.mutex[mIndexBase + 2].count = 2;
local function preCombat()
    varlastLunarPower = UnitPower("player", SPELL_POWER_ECLIPSE)
    varnextEclipseLunar = ((varlastLunarPower) < (0))
    varcertainEclipseDir = nil
    varhasMoonkin = (GetSpellInfo(DestroDummies:xlateString("Moonkin Form")) ~= nil)
end
DestroDummies.registry.preCombat[DestroDummies.classDruidBalance] = preCombat;

local function spellSent(varspell)
    if varnextEclipseLunar then
        local switchvar0 = varspell;
        if ((switchvar0 == (DestroDummies:xlateString("Wrath"))) ) then
            varforceEclipse = ((((UnitPower("player", SPELL_POWER_ECLIPSE)) - (13))) <= (- (99)))
        elseif ((switchvar0 == (DestroDummies:xlateString("Starsurge"))) ) then
            varforceEclipse = ((((UnitPower("player", SPELL_POWER_ECLIPSE)) - (15))) <= (- (99)))
        end
    else
        local switchvar1 = varspell;
        if ((switchvar1 == (DestroDummies:xlateString("Starfire"))) ) then
            varforceEclipse = ((((UnitPower("player", SPELL_POWER_ECLIPSE)) + (20))) >= (100))
        elseif ((switchvar1 == (DestroDummies:xlateString("Starsurge"))) ) then
            varforceEclipse = ((((UnitPower("player", SPELL_POWER_ECLIPSE)) + (15))) >= (100))
        end
    end;
end
DestroDummies.registry.spellSent[DestroDummies.classDruidBalance] = spellSent;

local function postSpell(varspell, varsucceed)
    if not (varsucceed) then
        varforceEclipse = nil
    end;
end
DestroDummies.registry.postSpell[DestroDummies.classDruidBalance] = postSpell;

local function PickCombat()
    DestroDummies:analysisInit();
    local clipMoonfire = 1;
    local clipSunfire = 1;
    local clipInsectSwarm = 1;
    local clipFaerieFire = 3;
    local varFFtime;
    local varFFcount;
    varFFtime, varFFcount = DestroDummies:utilBuffInfo(DestroDummies:xlateString("Faerie Fire"), true, "target")
    if (DestroDummies:spellReady(DestroDummies:xlateString("Force of Nature"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Force of Nature"), 0);
    end;
    if (not (DestroDummies:utilMxDebuff(mIndexBase + 1))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Faerie Fire"), 0);
    end;
    if ((DestroDummies:spellReady(DestroDummies:xlateString("Starfall"))) and (DestroDummies:utilBuff(DestroDummies:xlateString("Eclipse (Lunar)"), 0, "player", "HELPFUL", nil))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Starfall"), 0);
    end;
    if ((DestroDummies:spellReady(DestroDummies:xlateString("Typhoon"))) and (DestroDummies:utilBuff(DestroDummies:xlateString("Eclipse (Solar)"), 0, "player", "HELPFUL", nil))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Typhoon"), 0);
    end;
    if (DestroDummies:spellReady(DestroDummies:xlateString("Solar Beam"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Solar Beam"), 0);
    end;
    if ((not (DestroDummies:utilBuff(DestroDummies:xlateString("Moonkin Form"), 0, "player", "HELPFUL", nil))) and (varhasMoonkin)) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Moonkin Form"));
    end;
    if not (varcertainEclipseDir) then
        local varcurLunarPower = UnitPower("player", SPELL_POWER_ECLIPSE);
        if (varcurLunarPower) < (varlastLunarPower) then
            varnextEclipseLunar = true
            varcertainEclipseDir = true
        elseif ((varcurLunarPower) > (varlastLunarPower)) then
            varnextEclipseLunar = nil
            varcertainEclipseDir = true
        end;
    end;
    if not (((((varnextEclipseLunar) and (((((UnitPower("player", SPELL_POWER_ECLIPSE)) - (13))) <= (- (99)))))) or (((not (varnextEclipseLunar)) and (((((UnitPower("player", SPELL_POWER_ECLIPSE)) + (20))) >= (100))))))) then
        if (not (DestroDummies:utilDebuffByMe(DestroDummies:xlateString("Insect Swarm"), clipInsectSwarm))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Insect Swarm"));
        end;
        if ((not (DestroDummies:utilDebuffByMe(DestroDummies:xlateString("Moonfire"), clipMoonfire))) and (not (DestroDummies:utilDebuffByMe(DestroDummies:xlateString("Sunfire"), clipSunfire)))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Moonfire"));
        end;
        if (not ((DestroDummies.lastSpell == DestroDummies:xlateString("Starsurge")))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Starsurge"));
        end;
    end;
    if DestroDummies:utilBuff(DestroDummies:xlateString("Eclipse (Lunar)"), 0, "player", "HELPFUL", nil) then
        varnextEclipseLunar = nil
        varforceEclipse = nil
        DestroDummies:analysisAdd(DestroDummies:xlateString("Starfire"));
    elseif (DestroDummies:utilBuff(DestroDummies:xlateString("Eclipse (Solar)"), 0, "player", "HELPFUL", nil)) then
        varnextEclipseLunar = true
        varforceEclipse = nil
        DestroDummies:analysisAdd(DestroDummies:xlateString("Wrath"));
    elseif (varnextEclipseLunar) then
        if varforceEclipse then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Starfire"));
        else
            DestroDummies:analysisAdd(DestroDummies:xlateString("Wrath"));
        end;
    else
        if varforceEclipse then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Wrath"));
        else
            DestroDummies:analysisAdd(DestroDummies:xlateString("Starfire"));
        end;
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

local function PickNoCombat()
    DestroDummies:analysisInit();
    if ((not (IsMounted())) and (not (DestroDummies:utilMxBuff(mIndexBase + 2)))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Mark of the Wild"));
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

-- populate our registries
DestroDummies.registry.decideCombat[DestroDummies.classDruidBalance] = PickCombat;
DestroDummies.registry.decideNoCombat[DestroDummies.classDruidBalance] = PickNoCombat;
DestroDummies.lastMutexIndex = mIndexBase + 2;
