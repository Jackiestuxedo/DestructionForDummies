-- Autogenerated file.  Do not edit.  All changes will be lost
--
-- Definition of Beastmaster Hunter

DestroDummies.classHunterBeastmaster = DestroDummies.lastClassVal + 1;
DestroDummies.lastClassVal = DestroDummies.lastClassVal + 1;

local mIndexBase = DestroDummies.lastMutexIndex;

DestroDummies.mutex[mIndexBase + 1] = {};
DestroDummies.mutex[mIndexBase + 1].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 1].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 1][1] = DestroDummies:xlateString("Serpent Sting")
DestroDummies.mutex[mIndexBase + 1][2] = DestroDummies:xlateString("Wyvern Sting")
DestroDummies.mutex[mIndexBase + 1].count = 2;
DestroDummies.mutex[mIndexBase + 2] = {};
DestroDummies.mutex[mIndexBase + 2].clipCombat = 0;
DestroDummies.mutex[mIndexBase + 2].clipOOCombat = 0;
DestroDummies.mutex[mIndexBase + 2][1] = DestroDummies:xlateString("Marked for Death")
DestroDummies.mutex[mIndexBase + 2][2] = DestroDummies:xlateString("Hunter's Mark")
DestroDummies.mutex[mIndexBase + 2].count = 2;
local function PickCombat()
    DestroDummies:analysisInit();
    local varpHealth;
    local varranged;
    varpHealth = DestroDummies:utilHealth("pet")
    if (((varpHealth) == (nil)) or ((varpHealth) == (0))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Revive Pet"), 0);
    end;
    if (DestroDummies:spellReady(DestroDummies:xlateString("Rapid Fire"))) then
        DestroDummies:altRecommend(DestroDummies:xlateString("Rapid Fire"), 0);
    end;
    if (varpHealth) == (nil) then
        varpHealth = 0
    end;
    varranged = ((CheckInteractDistance("target", 3) == nil) or (IsSpellInRange(DestroDummies:xlateString("Auto Shot")) == 1))
    if (((not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil))) and ((varpHealth) > (0))) and ((varpHealth) < (50))) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
    end;
    if ((not (DestroDummies:utilMxDebuff(mIndexBase + 2))) and (varranged)) then
        DestroDummies:analysisAdd(DestroDummies:xlateString("Hunter's Mark"));
    end;
    DestroDummies:genfunc_DoAspect(1, varranged);
    if DestroDummiesPCdb.ferralMode then
        if (((varranged) and (not (DestroDummies:utilMxDebuffByMe(mIndexBase + 1)))) and (not ((DestroDummies.lastSpell == DestroDummies:xlateString("Serpent Sting"))))) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Serpent Sting"));
        end;
    else
        if varranged then
            local varfrenzyTime;
            local varfrenzyCount;
            varfrenzyTime, varfrenzyCount = DestroDummies:utilBuffInfo(DestroDummies:xlateString("Frenzy Effect"), false, "pet")
            if ((DestroDummies:spellReady(DestroDummies:xlateString("Bestial Wrath"))) and (DestroDummies:spellReady(DestroDummies:xlateString("Kill Command")))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Bestial Wrath"));
            end;
            DestroDummies:analysisAdd(DestroDummies:xlateString("Kill Command"));
            if ((DestroDummies:utilHealth("target")) <= (20)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Kill Shot"));
            end;
            if ((((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) < (50)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Fervor"));
            end;
            if ((varfrenzyCount) == (5)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Focus Fire"));
            end;
            if ((not (DestroDummies:utilMxDebuffByMe(mIndexBase + 1))) and (not ((DestroDummies.lastSpell == DestroDummies:xlateString("Serpent Sting"))))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Serpent Sting"));
            end;
            if ((((DestroDummies:unitPowerAfterCast() * 100) / UnitPowerMax("player"))) > (65)) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Arcane Shot"));
            end;
            if (((not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil))) and ((varpHealth) > (0))) and ((varpHealth) < (70))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
            end;
            DestroDummies:analysisAdd(DestroDummies:xlateString("Cobra Shot"));
            DestroDummies:analysisAdd(DestroDummies:xlateString("Steady Shot"));
        else
            DestroDummies:analysisAdd(DestroDummies:xlateString("Disengage"));
            if (DestroDummies:spellReady(DestroDummies:xlateString("Raptor Strike"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Raptor Strike"));
            end;
            if (DestroDummies:spellReady(DestroDummies:xlateString("Wing Clip"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Wing Clip"));
            end;
        end;
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

local function PickNoCombat()
    DestroDummies:analysisInit();
    if not (IsMounted()) then
        DestroDummies:genfunc_DoAspect(nil, nil);
        local varpHealth = DestroDummies:utilHealth("pet");
        local varwithPet = HasPetUI();
        if (varpHealth) == (nil) then
            DestroDummies:analysisAdd(DestroDummies:xlateString("Revive Pet"));
        else
            if (not (UnitExists("pet"))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Call Pet"));
            end;
            if ((varwithPet) and (((((varpHealth) > (0)) and ((varpHealth) < (90))) and (not (DestroDummies:utilBuff(DestroDummies:xlateString("Mend Pet"), 0, "pet", "HELPFUL", nil)))))) then
                DestroDummies:analysisAdd(DestroDummies:xlateString("Mend Pet"));
            end;
        end;
    end;
    return DestroDummies:analysisPick(nil, nil);
end;

-- populate our registries
DestroDummies.registry.decideCombat[DestroDummies.classHunterBeastmaster] = PickCombat;
DestroDummies.registry.decideNoCombat[DestroDummies.classHunterBeastmaster] = PickNoCombat;
DestroDummies.lastMutexIndex = mIndexBase + 2;
